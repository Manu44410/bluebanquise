---
- name: include_vars ░ Gather OS specific variables
  # This task gathers variables defined in OS specific files.
  #
  # Search vars in:
  #  - <distribution>_<major>.yml    # eg. CentOS_8.yml
  #  - <os_family>_<major>.yml       # eg. RedHat_8.yml
  #  - <distribution>.yml            # eg. CentOS.yml
  #  - <os_family>.yml               # eg. RedHat.yml
  #
  # If no OS specific file is found, the role will default to vars/main.yml
  #
  ansible.builtin.include_vars: "{{ item }}"
  with_first_found:
    - files:
        - "vars/{{ ansible_facts.distribution | replace(' ','_') }}_{{ ansible_facts.distribution_major_version }}.yml"
        - "vars/{{ ansible_facts.os_family }}_{{ ansible_facts.distribution_major_version }}.yml"
        - "vars/{{ ansible_facts.distribution | replace(' ','_') }}.yml"
        - "vars/{{ ansible_facts.os_family }}.yml"
      skip: true
  tags:
    - always

- name: "package █ Install {{ repositories_server_packages_to_install | join(' ') }} packages"
  ansible.builtin.package:
    name: "{{ repositories_server_packages_to_install }}"
    state: present
  tags:
    - package

- name: include_tasks ░ Use OS dedicated firewall task
  ansible.builtin.include_tasks: "{{ item }}"
  with_first_found:
    - files:
        - "{{ ansible_facts.distribution | replace(' ','_') }}_{{ ansible_facts.distribution_version }}/firewall.yml"
        - "{{ ansible_facts.distribution | replace(' ','_') }}_{{ ansible_facts.distribution_major_version }}/firewall.yml"
        - "{{ ansible_facts.os_family | replace(' ','_') }}_{{ ansible_facts.distribution_version }}/firewall.yml"
        - "{{ ansible_facts.os_family | replace(' ','_') }}_{{ ansible_facts.distribution_major_version }}/firewall.yml"
        - "{{ ansible_facts.distribution | replace(' ','_') }}/firewall.yml"
        - "{{ ansible_facts.os_family | replace(' ','_') }}/firewall.yml"
      skip: true
  tags:
    - internal
    - firewall

- name: include_tasks ░ Use OS dedicated task
  ansible.builtin.include_tasks: "{{ outer_item }}"
  with_first_found:
    - files:
        - "{{ ansible_facts.distribution | replace(' ','_') }}_{{ ansible_facts.distribution_version }}/main.yml"
        - "{{ ansible_facts.distribution | replace(' ','_') }}_{{ ansible_facts.distribution_major_version }}/main.yml"
        - "{{ ansible_facts.os_family | replace(' ','_') }}_{{ ansible_facts.distribution_version }}/main.yml"
        - "{{ ansible_facts.os_family | replace(' ','_') }}_{{ ansible_facts.distribution_major_version }}/main.yml"
        - "{{ ansible_facts.distribution | replace(' ','_') }}/main.yml"
        - "{{ ansible_facts.os_family | replace(' ','_') }}/main.yml"
      skip: true
  loop_control:
    loop_var: outer_item
  tags:
    - internal

- name: lineinfile █ Set main configuration file custom configurations
  ansible.builtin.lineinfile:
  aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa
    path: /etc/httpd/httpd.conf
    regexp: "{{ line_item.regexp }}"
    line: "{{ line_item.line }}"
  loop:
    - regexp: "^TFTP_ADDRESS"
      line: 'TFTP_ADDRESS="0.0.0.0:69"'
    - regexp: "^TFTP_OPTIONS"
      line: 'TFTP_OPTIONS="--secure --verbose"'
    - regexp: "^TFTP_DIRECTORY"
      line: 'TFTP_DIRECTORY="/var/lib/tftpboot"'
  loop_control:
    loop_var: line_item
  notify: service █ Restart pxe services
  tags:
    - need_package


- name: template █ Set http server custom configurations
  ansible.builtin.template:
    src: custom.conf.j2
    dest: "/etc/httpd/conf.d/{{ item.rule_name }}.conf"
    owner: root
    group: root
    mode: 0644
  tags:
    - template
  with_items: "{{ http_server_configurations }}"
  when:
    - http_server_configurations is not none
    - http_server_configurations is iterable
  notify: service █ Restart http server service

- name: apache2_module █ Enable apache2 modules
  community.general.apache2_module:
    force: "{{ item.force | default(omit, true) }}"
    identifier: "{{ item.identifier | default(omit, true) }}"
    ignore_configcheck: "{{ item.ignore_configcheck | default(omit, true) }}"
    name: "{{ item.name }}"
    state: "{{ item.state | default(omit, true) }}"
  with_items: "{{ http_server_modules }}"
  when:
    - http_server_modules is not none
    - http_server_modules is iterable
    - item.name is defined and item.name is not none
  notify: service █ Restart http server service

- name: "service █ Manage {{ repositories_server_services_to_start | join(' ') }} state"
  ansible.builtin.service:
    name: "{{ item }}"
    enabled: "{{ (repositories_server_enable_services | default(bb_enable_services) | default(true, true) | bool) | ternary('yes', 'no') }}"
    state: "{{ (repositories_server_start_services | default(bb_start_services) | default(true, true) | bool) | ternary('started', omit) }}"
  loop: "{{ repositories_server_services_to_start }}"
  tags:
    - service
